/*
 * @lc app=leetcode id=924 lang=cpp
 *
 * [924] Minimize Malware Spread
 *
 * https://leetcode.com/problems/minimize-malware-spread/description/
 *
 * algorithms
 * Hard (40.52%)
 * Total Accepted:    14.8K
 * Total Submissions: 36.5K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * In a network of nodes, each node i is directly connected to another node j
 * if and only if graph[i][j] = 1.
 * 
 * Some nodes initial are initially infected by malware.  Whenever two nodes
 * are directly connected and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware.  This spread of malware
 * will continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network, after the spread of malware stops.
 * 
 * We will remove one node from the initial list.  Return the node that if
 * removed, would minimize M(initial).  If multiple nodes could be removed to
 * minimize M(initial), return such a node with the smallest index.
 * 
 * Note that if a node was removed from the initial list of infected nodes, it
 * may still be infected later as a result of the malware spread.
 * 
 * 
 * 
 * 
 * 
 * 
 * Example 1:
 * 
 * 
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * 
 * 
 * Example 2:
 * 
 * 
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * 
 * 
 * Example 3:
 * 
 * 
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 * 
 * 
 * 
 * 
 * Note:
 * 
 * 
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 * 
 * 
 */
class DSU {
public:
    DSU(int n) : p_(n) {
        iota(p_.begin(), p_.end(), 0);
    }

    void Union(int x, int y) {
        p_[Find(x)] = Find(y);
    }

    int Find(int x) {
        if (x != p_[x])
            p_[x] = Find(p_[x]);
        return p_[x];
    }

private:
    vector<int> p_; 
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int n = graph.size();
        DSU dsu(n);
        for (int i = 0; i < n; ++i)
            for (int j = i + 1; j < n; ++j)
                if (graph[i][j])
                    dsu.Union(i, j);
        vector<int> unionsz(n, 0);
        vector<int> origincnt(n, 0);

        for (int i = 0; i < n; ++i)
            ++unionsz[dsu.Find(i)];
        for (int i : initial)
            ++origincnt[dsu.Find(i)];

        int maxsz = 0, result = *min_element(initial.begin(), initial.end());
        for (int i : initial) {
            if (origincnt[dsu.Find(i)] > 1)
                continue;
            int size = unionsz[dsu.Find(i)];
            if (size > maxsz) {
                maxsz = size;
                result = i;
            }
            else if (size == maxsz)
                result = min(result, i);
        }

        return result;
    }
};
